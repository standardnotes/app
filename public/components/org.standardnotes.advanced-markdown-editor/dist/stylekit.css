@charset "UTF-8";
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}

:root {
  --sn-stylekit-base-font-size: 13px;
  --sn-stylekit-font-size-p: 1rem;
  --sn-stylekit-font-size-editor: 1.21rem;
  --sn-stylekit-font-size-h6: 0.8rem;
  --sn-stylekit-font-size-h5: 0.9rem;
  --sn-stylekit-font-size-h4: 1rem;
  --sn-stylekit-font-size-h3: 1.1rem;
  --sn-stylekit-font-size-h2: 1.2rem;
  --sn-stylekit-font-size-h1: 1.3rem;
  --sn-stylekit-neutral-color: #989898;
  --sn-stylekit-neutral-contrast-color: #ffffff;
  --sn-stylekit-info-color: #086dd6;
  --sn-stylekit-info-color-darkened: #065cb5;
  --sn-stylekit-info-contrast-color: #ffffff;
  --sn-stylekit-success-color: #2b9612;
  --sn-stylekit-success-contrast-color: #ffffff;
  --sn-stylekit-warning-color: #f6a200;
  --sn-stylekit-warning-contrast-color: #ffffff;
  --sn-stylekit-danger-color: #f80324;
  --sn-stylekit-danger-contrast-color: #ffffff;
  --sn-stylekit-shadow-color: #c8c8c8;
  --sn-stylekit-background-color: #ffffff;
  --sn-stylekit-border-color: #dfe1e4;
  --sn-stylekit-foreground-color: #000000;
  --sn-stylekit-contrast-background-color: #f6f6f6;
  --sn-stylekit-contrast-foreground-color: #2e2e2e;
  --sn-stylekit-contrast-border-color: #e3e3e3;
  --sn-stylekit-secondary-background-color: #f6f6f6;
  --sn-stylekit-secondary-foreground-color: #2e2e2e;
  --sn-stylekit-secondary-border-color: #e3e3e3;
  --sn-stylekit-secondary-contrast-background-color: #e3e3e3;
  --sn-stylekit-secondary-contrast-foreground-color: #2e2e2e;
  --sn-stylekit-secondary-contrast-border-color: #a2a2a2;
  --sn-stylekit-editor-background-color: var(--sn-stylekit-background-color);
  --sn-stylekit-editor-foreground-color: var(--sn-stylekit-foreground-color);
  --sn-stylekit-paragraph-text-color: #454545;
  --sn-stylekit-input-placeholder-color: #a8a8a8;
  --sn-stylekit-input-border-color: #e3e3e3;
  --sn-stylekit-scrollbar-thumb-color: #dfdfdf;
  --sn-stylekit-scrollbar-track-border-color: #e7e7e7;
  --sn-stylekit-general-border-radius: 2px;
  --sn-stylekit-list-item-highlight-color: #f4f5f7;
  --sn-stylekit-simplified-chinese-font: 'Microsoft Yahei', '微软雅黑体';
  --sn-stylekit-monospace-font: 'SFMono-Regular', Consolas, 'Liberation Mono',
    Menlo, 'Ubuntu Mono', 'Courier New', monospace;
  --sn-stylekit-sans-serif-font: -apple-system, BlinkMacSystemFont, 'Segoe UI',
    'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',
    'Helvetica Neue', var(--sn-stylekit-simplified-chinese-font), sans-serif;
  --sn-stylekit-editor-font-family: var(--sn-stylekit-sans-serif-font);
  --sn-stylekit-theme-type: light;
  --sn-stylekit-theme-name: sn-light;
}

.sn-component {
  /**
 * Do not use these rules without explicitly handling focus in a different
 * way, otherwise keyboard focus will break.
 */
  font-family: var(--sn-stylekit-sans-serif-font);
  -webkit-font-smoothing: antialiased;
  color: var(--sn-stylekit-foreground-color);
}

.sn-component .sk-panel {
  box-shadow: 0px 2px 5px var(--sn-stylekit-shadow-color);
  background-color: var(--sn-stylekit-background-color);
  border: 1px solid var(--sn-stylekit-border-color);
  border-radius: var(--sn-stylekit-general-border-radius);
  display: flex;
  flex-direction: column;
  overflow: auto;
  flex-grow: 1;
}

.sn-component .sk-panel a:hover {
  text-decoration: underline;
}

.sn-component .sk-panel.static {
  box-shadow: none;
  border: none;
  border-radius: 0;
}

.sn-component .sk-panel .sk-panel-header {
  flex-shrink: 0;
  /* Don't allow to condense in height */
  display: flex;
  justify-content: space-between;
  padding: 1.1rem 2rem;
  border-bottom: 1px solid var(--sn-stylekit-contrast-border-color);
  background-color: var(--sn-stylekit-contrast-background-color);
  color: var(--sn-stylekit-contrast-foreground-color);
  align-items: center;
}

.sn-component .sk-panel .sk-panel-header .sk-panel-header-title {
  font-size: var(--sn-stylekit-font-size-h1);
  font-weight: 500;
}

.sn-component .sk-panel .sk-panel-header .close-button {
  font-weight: bold;
}

.sn-component .sk-panel .sk-footer,
.sn-component .sk-panel .sk-panel-footer {
  padding: 1rem 2rem;
  border-top: 1px solid var(--sn-stylekit-border-color);
  box-sizing: border-box;
}

.sn-component .sk-panel .sk-footer.extra-padding,
.sn-component .sk-panel .sk-panel-footer.extra-padding {
  padding: 2rem 2rem;
}

.sn-component .sk-panel .sk-footer .left,
.sn-component .sk-panel .sk-panel-footer .left {
  text-align: left;
  display: block;
}

.sn-component .sk-panel .sk-footer .right,
.sn-component .sk-panel .sk-panel-footer .right {
  text-align: right;
  display: block;
}

.sn-component .sk-panel .sk-panel-content {
  padding: 1.6rem 2rem;
  padding-bottom: 0;
  flex-grow: 1;
  overflow: scroll;
  height: 100%;
  overflow-y: auto !important;
  overflow-x: auto !important;
}

.sn-component .sk-panel .sk-panel-content .sk-p,
.sn-component .sk-panel .sk-panel-content .sk-li {
  color: var(--sn-stylekit-paragraph-text-color);
  line-height: 1.3;
}

.sn-component .sk-panel-section {
  padding-bottom: 1.6rem;
  display: flex;
  flex-direction: column;
}

.sn-component .sk-panel-section.sk-panel-hero {
  text-align: center;
}

.sn-component .sk-panel-section .sk-p:last-child {
  margin-bottom: 0;
}

.sn-component .sk-panel-section:not(:last-child) {
  margin-bottom: 1.5rem;
  border-bottom: 1px solid var(--sn-stylekit-border-color);
}

.sn-component .sk-panel-section:not(:last-child).no-border, .sn-component .sk-panel-section.sn-button:not(:last-child), .sn-component .sk-panel-section.sn-dropdown-menu:not(:last-child), .sn-component .sk-panel-section.sn-select:not(:last-child), .sn-component .sk-panel-section.sn-select-button:not(:last-child), .sn-component .sk-panel-section.sn-select-popover:not(:last-child) {
  border-bottom: none;
}

.sn-component .sk-panel-section:last-child {
  margin-bottom: 0.5rem;
}

.sn-component .sk-panel-section.no-bottom-pad {
  padding-bottom: 0;
  margin-bottom: 0;
}

.sn-component .sk-panel-section .sk-panel-section-title {
  margin-bottom: 0.5rem;
  font-weight: bold;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-panel-section .sk-panel-section-outer-title {
  border-bottom: 1px solid var(--sn-stylekit-border-color);
  padding-bottom: 0.9rem;
  margin-top: 2.1rem;
  margin-bottom: 15px;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-panel-section .sk-panel-section-subtitle {
  font-size: var(--sn-stylekit-font-size-h5);
  margin-bottom: 2px;
}

.sn-component .sk-panel-section .sk-panel-section-subtitle.subtle {
  font-weight: normal;
  opacity: 0.6;
}

.sn-component .sk-panel-section .text-content .sk-p {
  margin-bottom: 1rem;
}

.sn-component .sk-panel-section .text-content p:first-child {
  margin-top: 0.3rem;
}

.sn-component .sk-panel-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: 0.4rem;
}

.sn-component .sk-panel-row.centered {
  justify-content: center;
}

.sn-component .sk-panel-row.justify-right {
  justify-content: flex-end;
}

.sn-component .sk-panel-row.justify-left {
  justify-content: flex-start;
}

.sn-component .sk-panel-row.align-top {
  align-items: flex-start;
}

.sn-component .sk-panel-row .sk-panel-column.stretch {
  width: 100%;
}

.sn-component .sk-panel-row.default-padding, .sn-component .sk-panel-row:not(:last-child) {
  padding-bottom: 0.4rem;
}

.sn-component .sk-panel-row.condensed {
  padding-top: 0.2rem;
  padding-bottom: 0.2rem;
}

.sn-component .sk-panel-row .sk-p {
  margin: 0;
  padding: 0;
}

.sn-component .vertical-rule {
  background-color: var(--sn-stylekit-border-color);
  height: 1.5rem;
  width: 1px;
}

.sn-component .sk-panel-form {
  width: 100%;
}

.sn-component .sk-panel-form.half {
  width: 50%;
}

.sn-component .sk-panel-form .form-submit {
  margin-top: 0.15rem;
}

.sn-component .right-aligned {
  justify-content: flex-end;
  text-align: right;
}

.sn-component .sk-menu-panel {
  background-color: var(--sn-stylekit-background-color);
  border: 1px solid var(--sn-stylekit-contrast-border-color);
  border-radius: var(--sn-stylekit-general-border-radius);
  overflow: scroll;
  user-select: none;
  overflow-y: auto !important;
  overflow-x: auto !important;
}

.sn-component .sk-menu-panel .sk-menu-panel-header {
  padding: 0.8rem 1rem;
  border-bottom: 1px solid var(--sn-stylekit-contrast-border-color);
  background-color: var(--sn-stylekit-contrast-background-color);
  color: var(--sn-stylekit-contrast-foreground-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.sn-component .sk-menu-panel .sk-menu-panel-header-title {
  font-weight: bold;
  font-size: var(--sn-stylekit-font-size-h4);
}

.sn-component .sk-menu-panel .sk-menu-panel-header-subtitle {
  margin-top: 0.2rem;
  opacity: 0.6;
}

.sn-component .sk-menu-panel .sk-menu-panel-row {
  padding: 1rem 1rem;
  cursor: pointer;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  border-bottom: 1px solid var(--sn-stylekit-border-color);
}

.sn-component .sk-menu-panel .sk-menu-panel-row:hover {
  background-color: var(--sn-stylekit-contrast-background-color);
  color: var(--sn-stylekit-contrast-foreground-color);
  border-color: var(--sn-stylekit-contrast-border-color);
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column {
  display: flex;
  justify-content: center;
  flex-direction: column;
  /* Nested row */
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column:not(:first-child) {
  padding-left: 1rem;
  padding-right: 0.15rem;
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column.stretch {
  width: 100%;
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column .sk-menu-panel-subrows {
  margin-top: 1rem;
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column .sk-menu-panel-row,
.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column .sk-menu-panel-subrow {
  border: 1px solid var(--sn-stylekit-contrast-border-color);
  margin-top: -1px;
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column .sk-menu-panel-row:hover,
.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column .sk-menu-panel-subrow:hover {
  background-color: var(--sn-stylekit-background-color);
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-menu-panel-column .left {
  display: flex;
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-button .sk-label, .sn-component .sk-menu-panel .sk-menu-panel-row .sk-box .sk-label, .sn-component .sk-menu-panel .sk-menu-panel-row .sk-button .sk-panel-section .sk-panel-section-subtitle, .sn-component .sk-panel-section .sk-menu-panel .sk-menu-panel-row .sk-button .sk-panel-section-subtitle, .sn-component .sk-menu-panel .sk-menu-panel-row .sk-box .sk-panel-section .sk-panel-section-subtitle, .sn-component .sk-panel-section .sk-menu-panel .sk-menu-panel-row .sk-box .sk-panel-section-subtitle {
  font-size: var(--sn-stylekit-font-size-h6);
  font-weight: normal;
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-label, .sn-component .sk-menu-panel .sk-menu-panel-row .sk-panel-section .sk-panel-section-subtitle, .sn-component .sk-panel-section .sk-menu-panel .sk-menu-panel-row .sk-panel-section-subtitle {
  font-size: var(--sn-stylekit-font-size-p);
  font-weight: bold;
}

.sn-component .sk-menu-panel .sk-menu-panel-row .sk-sublabel {
  font-size: var(--sn-stylekit-font-size-h5);
  margin-top: 0.2rem;
  opacity: 0.6;
}

.sn-component .red {
  color: var(--sn-stylekit-danger-color);
}

.sn-component .tinted {
  color: var(--sn-stylekit-info-color);
}

.sn-component .selectable {
  user-select: text !important;
  -ms-user-select: text !important;
  -moz-user-select: text !important;
  -webkit-user-select: text !important;
}

.sn-component .sk-h1,
.sn-component .sk-h2,
.sn-component .sk-h3,
.sn-component .sk-h4,
.sn-component .sk-h5 {
  margin: 0;
  padding: 0;
  font-weight: normal;
}

.sn-component .sk-h1 {
  font-weight: 500;
  font-size: var(--sn-stylekit-font-size-h1);
  line-height: 1.9rem;
}

.sn-component .sk-h2 {
  font-size: var(--sn-stylekit-font-size-h2);
  line-height: 1.8rem;
}

.sn-component .sk-h3 {
  font-size: var(--sn-stylekit-font-size-h3);
  line-height: 1.7rem;
}

.sn-component .sk-h4 {
  font-size: var(--sn-stylekit-font-size-p);
  line-height: 1.4rem;
}

.sn-component .sk-h5 {
  font-size: var(--sn-stylekit-font-size-h5);
}

.sn-component .sk-bold {
  font-weight: bold;
}

.sn-component .sk-font-small {
  font-size: var(--sn-stylekit-font-size-h5);
}

.sn-component .sk-font-normal {
  font-size: var(--sn-stylekit-font-size-p);
}

.sn-component .sk-font-large {
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component a.sk-a {
  cursor: pointer;
  user-select: none;
}

.sn-component a.sk-a.disabled {
  color: var(--sn-stylekit-neutral-color);
  opacity: 0.6;
}

.sn-component a.sk-a.boxed {
  border-radius: var(--sn-stylekit-general-border-radius);
  padding: 0.3rem 0.4rem;
}

.sn-component a.sk-a.boxed:hover {
  text-decoration: none;
}

.sn-component a.sk-a.boxed.neutral {
  background-color: var(--sn-stylekit-neutral-color);
  color: var(--sn-stylekit-neutral-contrast-color);
}

.sn-component a.sk-a.boxed.info {
  background-color: var(--sn-stylekit-info-color);
  color: var(--sn-stylekit-info-contrast-color);
}

.sn-component a.sk-a.boxed.warning {
  background-color: var(--sn-stylekit-warning-color);
  color: var(--sn-stylekit-warning-contrast-color);
}

.sn-component a.sk-a.boxed.danger {
  background-color: var(--sn-stylekit-danger-color);
  color: var(--sn-stylekit-danger-contrast-color);
}

.sn-component a.sk-a.boxed.success {
  background-color: var(--sn-stylekit-success-color);
  color: var(--sn-stylekit-success-contrast-color);
}

.sn-component .wrap {
  word-wrap: break-word;
}

.sn-component *.sk-base {
  color: var(--sn-stylekit-foreground-color);
}

.sn-component *.contrast {
  color: var(--sn-stylekit-contrast-foreground-color);
}

.sn-component *.neutral {
  color: var(--sn-stylekit-neutral-color);
}

.sn-component *.info {
  color: var(--sn-stylekit-info-color);
}

.sn-component *.info-contrast {
  color: var(--sn-stylekit-info-contrast-color);
}

.sn-component *.warning {
  color: var(--sn-stylekit-warning-color);
}

.sn-component *.danger {
  color: var(--sn-stylekit-danger-color);
}

.sn-component *.success {
  color: var(--sn-stylekit-success-color);
}

.sn-component *.info-i {
  color: var(--sn-stylekit-info-color) !important;
}

.sn-component *.warning-i {
  color: var(--sn-stylekit-warning-color) !important;
}

.sn-component *.danger-i {
  color: var(--sn-stylekit-danger-color) !important;
}

.sn-component *.success-i {
  color: var(--sn-stylekit-success-color) !important;
}

.sn-component *.clear {
  background-color: transparent;
  border: none;
}

.sn-component .center-text {
  text-align: center !important;
  justify-content: center !important;
}

.sn-component p.sk-p {
  margin: 0.5rem 0;
}

.sn-component input.sk-input {
  box-sizing: border-box;
  padding: 0.7rem 0.8rem;
  margin: 0.3rem 0;
  border: none;
  font-size: var(--sn-stylekit-font-size-h3);
  width: 100%;
  outline: 0;
  resize: none;
}

.sn-component input.sk-input.clear {
  color: var(--sn-stylekit-foreground-color);
  background-color: transparent;
  border: none;
}

.sn-component input.sk-input.no-border, .sn-component input.sk-input.sn-button, .sn-component input.sk-input.sn-dropdown-menu, .sn-component input.sk-input.sn-select, .sn-component input.sk-input.sn-select-button, .sn-component input.sk-input.sn-select-popover {
  border: none;
}

.sn-component .sk-label, .sn-component .sk-panel-section .sk-panel-section-subtitle {
  font-weight: bold;
}

.sn-component .sk-label.no-bold, .sn-component .sk-panel-section .no-bold.sk-panel-section-subtitle {
  font-weight: normal;
}

.sn-component label.sk-label, .sn-component .sk-panel-section label.sk-panel-section-subtitle {
  margin: 0.7rem 0;
  display: block;
}

.sn-component label.sk-label input[type='checkbox'], .sn-component .sk-panel-section label.sk-panel-section-subtitle input[type='checkbox'],
.sn-component input[type='radio'] {
  width: auto;
  margin-right: 0.45rem;
  /* Space after checkbox */
  vertical-align: middle;
}

.sn-component .sk-horizontal-group > *, .sn-component .sk-input-group > * {
  display: inline-block;
  vertical-align: middle;
}

.sn-component .sk-horizontal-group > *:not(:first-child), .sn-component .sk-input-group > *:not(:first-child) {
  margin-left: 0.9rem;
}

.sn-component .sk-border-bottom {
  border-bottom: 1px solid var(--sn-stylekit-border-color);
}

.sn-component .sk-checkbox-group {
  padding-top: 0.5rem;
  padding-bottom: 0.3rem;
}

.sn-component ::placeholder {
  /* Chrome, Firefox, Opera, Safari 10.1+ */
  color: var(--sn-stylekit-input-placeholder-color);
}

.sn-component :-ms-input-placeholder {
  /* Internet Explorer 10-11 */
  color: var(--sn-stylekit-input-placeholder-color);
}

.sn-component ::-ms-input-placeholder {
  /* Microsoft Edge */
  color: var(--sn-stylekit-input-placeholder-color);
}

.sn-component .sk-button-group.stretch {
  display: flex;
  width: 100%;
}

.sn-component .sk-button-group.stretch .sk-button, .sn-component .sk-button-group.stretch .sk-box {
  display: block;
  flex-grow: 1;
  text-align: center;
}

.sn-component .sk-button-group .sk-button, .sn-component .sk-button-group .sk-box {
  display: inline-block;
  vertical-align: middle;
}

.sn-component .sk-button-group .sk-button:not(:last-child), .sn-component .sk-button-group .sk-box:not(:last-child) {
  margin-right: 5px;
}

.sn-component .sk-button-group .sk-button:not(:last-child).featured, .sn-component .sk-button-group .sk-box:not(:last-child).featured {
  margin-right: 8px;
}

.sn-component .sk-segmented-buttons {
  display: flex;
  flex-direction: row;
}

.sn-component .sk-segmented-buttons .sk-button, .sn-component .sk-segmented-buttons .sk-box {
  border-radius: 0;
  white-space: nowrap;
  margin: 0;
  margin-left: 0 !important;
  margin-right: 0 !important;
}

.sn-component .sk-segmented-buttons .sk-button:not(:last-child), .sn-component .sk-segmented-buttons .sk-box:not(:last-child) {
  border-right: none;
  border-radius: 0;
}

.sn-component .sk-segmented-buttons .sk-button:first-child, .sn-component .sk-segmented-buttons .sk-box:first-child {
  border-top-left-radius: var(--sn-stylekit-general-border-radius);
  border-bottom-left-radius: var(--sn-stylekit-general-border-radius);
  border-right: none;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.sn-component .sk-segmented-buttons .sk-button:last-child, .sn-component .sk-segmented-buttons .sk-box:last-child {
  border-top-right-radius: var(--sn-stylekit-general-border-radius);
  border-bottom-right-radius: var(--sn-stylekit-general-border-radius);
  border-left: none;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.sn-component .sk-box-group .sk-box {
  display: inline-block;
}

.sn-component .sk-box-group .sk-box:not(:last-child) {
  margin-right: 5px;
}

.sn-component .sk-a.button {
  text-decoration: none;
}

.sn-component .sk-button, .sn-component .sk-box {
  display: table;
  padding: 0.5rem 0.7rem;
  font-size: var(--sn-stylekit-font-size-h5);
  cursor: pointer;
  text-align: center;
  user-select: none;
}

.sn-component .sk-button.no-hover-border:after, .sn-component .no-hover-border.sk-box:after {
  color: transparent !important;
}

.sn-component .sk-button.wide, .sn-component .wide.sk-box {
  padding: 0.3rem 1.7rem;
}

.sn-component .sk-button > .sk-label, .sn-component .sk-box > .sk-label, .sn-component .sk-panel-section .sk-button > .sk-panel-section-subtitle, .sn-component .sk-panel-section .sk-box > .sk-panel-section-subtitle {
  font-weight: bold;
  display: block;
  text-align: center;
}

.sn-component .sk-button.big, .sn-component .big.sk-box {
  font-size: var(--sn-stylekit-font-size-h3);
  padding: 0.7rem 2.5rem;
}

.sn-component .sk-box {
  padding: 2.5rem 1.5rem;
}

.sn-component .sk-button.sk-base, .sn-component .sk-base.sk-box,
.sn-component .sk-box.sk-base,
.sn-component .sk-circle.sk-base {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-foreground-color);
  position: relative;
  background-color: var(--sn-stylekit-background-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-background-color);
}

.sn-component .sk-button.sk-base *, .sn-component .sk-base.sk-box *,
.sn-component .sk-box.sk-base *,
.sn-component .sk-circle.sk-base * {
  position: relative;
}

.sn-component .sk-button.sk-base:before, .sn-component .sk-base.sk-box:before,
.sn-component .sk-box.sk-base:before,
.sn-component .sk-circle.sk-base:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-background-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.sk-base:after, .sn-component .sk-base.sk-box:after,
.sn-component .sk-box.sk-base:after,
.sn-component .sk-circle.sk-base:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-background-color);
}

.sn-component .sk-button.sk-base:hover:before, .sn-component .sk-base.sk-box:hover:before,
.sn-component .sk-box.sk-base:hover:before,
.sn-component .sk-circle.sk-base:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.sk-base.no-bg, .sn-component .sk-base.no-bg.sk-box,
.sn-component .sk-box.sk-base.no-bg,
.sn-component .sk-circle.sk-base.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.sk-base.no-bg:before, .sn-component .sk-base.no-bg.sk-box:before,
.sn-component .sk-box.sk-base.no-bg:before,
.sn-component .sk-circle.sk-base.no-bg:before {
  content: none;
}

.sn-component .sk-button.sk-base.featured, .sn-component .sk-base.featured.sk-box,
.sn-component .sk-box.sk-base.featured,
.sn-component .sk-circle.sk-base.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.sk-base.featured:before, .sn-component .sk-base.featured.sk-box:before,
.sn-component .sk-box.sk-base.featured:before,
.sn-component .sk-circle.sk-base.featured:before {
  opacity: 1;
}

.sn-component .sk-button.contrast, .sn-component .contrast.sk-box,
.sn-component .sk-box.contrast,
.sn-component .sk-circle.contrast {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-contrast-foreground-color);
  position: relative;
  background-color: var(--sn-stylekit-contrast-background-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-contrast-background-color);
}

.sn-component .sk-button.contrast *, .sn-component .contrast.sk-box *,
.sn-component .sk-box.contrast *,
.sn-component .sk-circle.contrast * {
  position: relative;
}

.sn-component .sk-button.contrast:before, .sn-component .contrast.sk-box:before,
.sn-component .sk-box.contrast:before,
.sn-component .sk-circle.contrast:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-contrast-background-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.contrast:after, .sn-component .contrast.sk-box:after,
.sn-component .sk-box.contrast:after,
.sn-component .sk-circle.contrast:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-contrast-background-color);
}

.sn-component .sk-button.contrast:hover:before, .sn-component .contrast.sk-box:hover:before,
.sn-component .sk-box.contrast:hover:before,
.sn-component .sk-circle.contrast:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.contrast.no-bg, .sn-component .contrast.no-bg.sk-box,
.sn-component .sk-box.contrast.no-bg,
.sn-component .sk-circle.contrast.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.contrast.no-bg:before, .sn-component .contrast.no-bg.sk-box:before,
.sn-component .sk-box.contrast.no-bg:before,
.sn-component .sk-circle.contrast.no-bg:before {
  content: none;
}

.sn-component .sk-button.contrast.featured, .sn-component .contrast.featured.sk-box,
.sn-component .sk-box.contrast.featured,
.sn-component .sk-circle.contrast.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.contrast.featured:before, .sn-component .contrast.featured.sk-box:before,
.sn-component .sk-box.contrast.featured:before,
.sn-component .sk-circle.contrast.featured:before {
  opacity: 1;
}

.sn-component .sk-button.sk-secondary, .sn-component .sk-secondary.sk-box,
.sn-component .sk-box.sk-secondary,
.sn-component .sk-circle.sk-secondary {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-secondary-foreground-color);
  position: relative;
  background-color: var(--sn-stylekit-secondary-background-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-secondary-background-color);
}

.sn-component .sk-button.sk-secondary *, .sn-component .sk-secondary.sk-box *,
.sn-component .sk-box.sk-secondary *,
.sn-component .sk-circle.sk-secondary * {
  position: relative;
}

.sn-component .sk-button.sk-secondary:before, .sn-component .sk-secondary.sk-box:before,
.sn-component .sk-box.sk-secondary:before,
.sn-component .sk-circle.sk-secondary:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-secondary-background-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.sk-secondary:after, .sn-component .sk-secondary.sk-box:after,
.sn-component .sk-box.sk-secondary:after,
.sn-component .sk-circle.sk-secondary:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-secondary-background-color);
}

.sn-component .sk-button.sk-secondary:hover:before, .sn-component .sk-secondary.sk-box:hover:before,
.sn-component .sk-box.sk-secondary:hover:before,
.sn-component .sk-circle.sk-secondary:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.sk-secondary.no-bg, .sn-component .sk-secondary.no-bg.sk-box,
.sn-component .sk-box.sk-secondary.no-bg,
.sn-component .sk-circle.sk-secondary.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.sk-secondary.no-bg:before, .sn-component .sk-secondary.no-bg.sk-box:before,
.sn-component .sk-box.sk-secondary.no-bg:before,
.sn-component .sk-circle.sk-secondary.no-bg:before {
  content: none;
}

.sn-component .sk-button.sk-secondary.featured, .sn-component .sk-secondary.featured.sk-box,
.sn-component .sk-box.sk-secondary.featured,
.sn-component .sk-circle.sk-secondary.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.sk-secondary.featured:before, .sn-component .sk-secondary.featured.sk-box:before,
.sn-component .sk-box.sk-secondary.featured:before,
.sn-component .sk-circle.sk-secondary.featured:before {
  opacity: 1;
}

.sn-component .sk-button.sk-secondary-contrast, .sn-component .sk-secondary-contrast.sk-box,
.sn-component .sk-box.sk-secondary-contrast,
.sn-component .sk-circle.sk-secondary-contrast {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-secondary-contrast-foreground-color);
  position: relative;
  background-color: var(--sn-stylekit-secondary-contrast-background-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-secondary-contrast-background-color);
}

.sn-component .sk-button.sk-secondary-contrast *, .sn-component .sk-secondary-contrast.sk-box *,
.sn-component .sk-box.sk-secondary-contrast *,
.sn-component .sk-circle.sk-secondary-contrast * {
  position: relative;
}

.sn-component .sk-button.sk-secondary-contrast:before, .sn-component .sk-secondary-contrast.sk-box:before,
.sn-component .sk-box.sk-secondary-contrast:before,
.sn-component .sk-circle.sk-secondary-contrast:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-secondary-contrast-background-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.sk-secondary-contrast:after, .sn-component .sk-secondary-contrast.sk-box:after,
.sn-component .sk-box.sk-secondary-contrast:after,
.sn-component .sk-circle.sk-secondary-contrast:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-secondary-contrast-background-color);
}

.sn-component .sk-button.sk-secondary-contrast:hover:before, .sn-component .sk-secondary-contrast.sk-box:hover:before,
.sn-component .sk-box.sk-secondary-contrast:hover:before,
.sn-component .sk-circle.sk-secondary-contrast:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.sk-secondary-contrast.no-bg, .sn-component .sk-secondary-contrast.no-bg.sk-box,
.sn-component .sk-box.sk-secondary-contrast.no-bg,
.sn-component .sk-circle.sk-secondary-contrast.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.sk-secondary-contrast.no-bg:before, .sn-component .sk-secondary-contrast.no-bg.sk-box:before,
.sn-component .sk-box.sk-secondary-contrast.no-bg:before,
.sn-component .sk-circle.sk-secondary-contrast.no-bg:before {
  content: none;
}

.sn-component .sk-button.sk-secondary-contrast.featured, .sn-component .sk-secondary-contrast.featured.sk-box,
.sn-component .sk-box.sk-secondary-contrast.featured,
.sn-component .sk-circle.sk-secondary-contrast.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.sk-secondary-contrast.featured:before, .sn-component .sk-secondary-contrast.featured.sk-box:before,
.sn-component .sk-box.sk-secondary-contrast.featured:before,
.sn-component .sk-circle.sk-secondary-contrast.featured:before {
  opacity: 1;
}

.sn-component .sk-button.neutral, .sn-component .neutral.sk-box,
.sn-component .sk-box.neutral,
.sn-component .sk-circle.neutral {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-neutral-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-neutral-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-neutral-color);
}

.sn-component .sk-button.neutral *, .sn-component .neutral.sk-box *,
.sn-component .sk-box.neutral *,
.sn-component .sk-circle.neutral * {
  position: relative;
}

.sn-component .sk-button.neutral:before, .sn-component .neutral.sk-box:before,
.sn-component .sk-box.neutral:before,
.sn-component .sk-circle.neutral:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-neutral-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.neutral:after, .sn-component .neutral.sk-box:after,
.sn-component .sk-box.neutral:after,
.sn-component .sk-circle.neutral:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-neutral-color);
}

.sn-component .sk-button.neutral:hover:before, .sn-component .neutral.sk-box:hover:before,
.sn-component .sk-box.neutral:hover:before,
.sn-component .sk-circle.neutral:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.neutral.no-bg, .sn-component .neutral.no-bg.sk-box,
.sn-component .sk-box.neutral.no-bg,
.sn-component .sk-circle.neutral.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.neutral.no-bg:before, .sn-component .neutral.no-bg.sk-box:before,
.sn-component .sk-box.neutral.no-bg:before,
.sn-component .sk-circle.neutral.no-bg:before {
  content: none;
}

.sn-component .sk-button.neutral.featured, .sn-component .neutral.featured.sk-box,
.sn-component .sk-box.neutral.featured,
.sn-component .sk-circle.neutral.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.neutral.featured:before, .sn-component .neutral.featured.sk-box:before,
.sn-component .sk-box.neutral.featured:before,
.sn-component .sk-circle.neutral.featured:before {
  opacity: 1;
}

.sn-component .sk-button.info, .sn-component .info.sk-box,
.sn-component .sk-box.info,
.sn-component .sk-circle.info {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-info-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-info-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-info-color);
}

.sn-component .sk-button.info *, .sn-component .info.sk-box *,
.sn-component .sk-box.info *,
.sn-component .sk-circle.info * {
  position: relative;
}

.sn-component .sk-button.info:before, .sn-component .info.sk-box:before,
.sn-component .sk-box.info:before,
.sn-component .sk-circle.info:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-info-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.info:after, .sn-component .info.sk-box:after,
.sn-component .sk-box.info:after,
.sn-component .sk-circle.info:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-info-color);
}

.sn-component .sk-button.info:hover:before, .sn-component .info.sk-box:hover:before,
.sn-component .sk-box.info:hover:before,
.sn-component .sk-circle.info:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.info.no-bg, .sn-component .info.no-bg.sk-box,
.sn-component .sk-box.info.no-bg,
.sn-component .sk-circle.info.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.info.no-bg:before, .sn-component .info.no-bg.sk-box:before,
.sn-component .sk-box.info.no-bg:before,
.sn-component .sk-circle.info.no-bg:before {
  content: none;
}

.sn-component .sk-button.info.featured, .sn-component .info.featured.sk-box,
.sn-component .sk-box.info.featured,
.sn-component .sk-circle.info.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.info.featured:before, .sn-component .info.featured.sk-box:before,
.sn-component .sk-box.info.featured:before,
.sn-component .sk-circle.info.featured:before {
  opacity: 1;
}

.sn-component .sk-button.warning, .sn-component .warning.sk-box,
.sn-component .sk-box.warning,
.sn-component .sk-circle.warning {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-warning-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-warning-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-warning-color);
}

.sn-component .sk-button.warning *, .sn-component .warning.sk-box *,
.sn-component .sk-box.warning *,
.sn-component .sk-circle.warning * {
  position: relative;
}

.sn-component .sk-button.warning:before, .sn-component .warning.sk-box:before,
.sn-component .sk-box.warning:before,
.sn-component .sk-circle.warning:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-warning-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.warning:after, .sn-component .warning.sk-box:after,
.sn-component .sk-box.warning:after,
.sn-component .sk-circle.warning:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-warning-color);
}

.sn-component .sk-button.warning:hover:before, .sn-component .warning.sk-box:hover:before,
.sn-component .sk-box.warning:hover:before,
.sn-component .sk-circle.warning:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.warning.no-bg, .sn-component .warning.no-bg.sk-box,
.sn-component .sk-box.warning.no-bg,
.sn-component .sk-circle.warning.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.warning.no-bg:before, .sn-component .warning.no-bg.sk-box:before,
.sn-component .sk-box.warning.no-bg:before,
.sn-component .sk-circle.warning.no-bg:before {
  content: none;
}

.sn-component .sk-button.warning.featured, .sn-component .warning.featured.sk-box,
.sn-component .sk-box.warning.featured,
.sn-component .sk-circle.warning.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.warning.featured:before, .sn-component .warning.featured.sk-box:before,
.sn-component .sk-box.warning.featured:before,
.sn-component .sk-circle.warning.featured:before {
  opacity: 1;
}

.sn-component .sk-button.danger, .sn-component .danger.sk-box,
.sn-component .sk-box.danger,
.sn-component .sk-circle.danger {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-danger-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-danger-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-danger-color);
}

.sn-component .sk-button.danger *, .sn-component .danger.sk-box *,
.sn-component .sk-box.danger *,
.sn-component .sk-circle.danger * {
  position: relative;
}

.sn-component .sk-button.danger:before, .sn-component .danger.sk-box:before,
.sn-component .sk-box.danger:before,
.sn-component .sk-circle.danger:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-danger-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.danger:after, .sn-component .danger.sk-box:after,
.sn-component .sk-box.danger:after,
.sn-component .sk-circle.danger:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-danger-color);
}

.sn-component .sk-button.danger:hover:before, .sn-component .danger.sk-box:hover:before,
.sn-component .sk-box.danger:hover:before,
.sn-component .sk-circle.danger:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.danger.no-bg, .sn-component .danger.no-bg.sk-box,
.sn-component .sk-box.danger.no-bg,
.sn-component .sk-circle.danger.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.danger.no-bg:before, .sn-component .danger.no-bg.sk-box:before,
.sn-component .sk-box.danger.no-bg:before,
.sn-component .sk-circle.danger.no-bg:before {
  content: none;
}

.sn-component .sk-button.danger.featured, .sn-component .danger.featured.sk-box,
.sn-component .sk-box.danger.featured,
.sn-component .sk-circle.danger.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.danger.featured:before, .sn-component .danger.featured.sk-box:before,
.sn-component .sk-box.danger.featured:before,
.sn-component .sk-circle.danger.featured:before {
  opacity: 1;
}

.sn-component .sk-button.success, .sn-component .success.sk-box,
.sn-component .sk-box.success,
.sn-component .sk-circle.success {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-success-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-success-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-success-color);
}

.sn-component .sk-button.success *, .sn-component .success.sk-box *,
.sn-component .sk-box.success *,
.sn-component .sk-circle.success * {
  position: relative;
}

.sn-component .sk-button.success:before, .sn-component .success.sk-box:before,
.sn-component .sk-box.success:before,
.sn-component .sk-circle.success:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-success-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-button.success:after, .sn-component .success.sk-box:after,
.sn-component .sk-box.success:after,
.sn-component .sk-circle.success:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-success-color);
}

.sn-component .sk-button.success:hover:before, .sn-component .success.sk-box:hover:before,
.sn-component .sk-box.success:hover:before,
.sn-component .sk-circle.success:hover:before {
  filter: brightness(130%);
}

.sn-component .sk-button.success.no-bg, .sn-component .success.no-bg.sk-box,
.sn-component .sk-box.success.no-bg,
.sn-component .sk-circle.success.no-bg {
  background-color: transparent;
}

.sn-component .sk-button.success.no-bg:before, .sn-component .success.no-bg.sk-box:before,
.sn-component .sk-box.success.no-bg:before,
.sn-component .sk-circle.success.no-bg:before {
  content: none;
}

.sn-component .sk-button.success.featured, .sn-component .success.featured.sk-box,
.sn-component .sk-box.success.featured,
.sn-component .sk-circle.success.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-button.success.featured:before, .sn-component .success.featured.sk-box:before,
.sn-component .sk-box.success.featured:before,
.sn-component .sk-circle.success.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.contrast,
.sn-component .sk-input.contrast {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-contrast-foreground-color);
  position: relative;
  background-color: var(--sn-stylekit-contrast-background-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-contrast-border-color);
  border: 1px solid var(--sn-stylekit-contrast-border-color);
}

.sn-component .sk-notification.contrast *,
.sn-component .sk-input.contrast * {
  position: relative;
}

.sn-component .sk-notification.contrast:before,
.sn-component .sk-input.contrast:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-contrast-background-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.contrast:after,
.sn-component .sk-input.contrast:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  color: var(--sn-stylekit-contrast-border-color);
  border-color: var(--sn-stylekit-contrast-border-color);
}

.sn-component .sk-notification.contrast.no-bg,
.sn-component .sk-input.contrast.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.contrast.no-bg:before,
.sn-component .sk-input.contrast.no-bg:before {
  content: none;
}

.sn-component .sk-notification.contrast.featured,
.sn-component .sk-input.contrast.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.contrast.featured:before,
.sn-component .sk-input.contrast.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.sk-secondary,
.sn-component .sk-input.sk-secondary {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-secondary-foreground-color);
  position: relative;
  background-color: var(--sn-stylekit-secondary-background-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-secondary-border-color);
  border: 1px solid var(--sn-stylekit-secondary-border-color);
}

.sn-component .sk-notification.sk-secondary *,
.sn-component .sk-input.sk-secondary * {
  position: relative;
}

.sn-component .sk-notification.sk-secondary:before,
.sn-component .sk-input.sk-secondary:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-secondary-background-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.sk-secondary:after,
.sn-component .sk-input.sk-secondary:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  color: var(--sn-stylekit-secondary-border-color);
  border-color: var(--sn-stylekit-secondary-border-color);
}

.sn-component .sk-notification.sk-secondary.no-bg,
.sn-component .sk-input.sk-secondary.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.sk-secondary.no-bg:before,
.sn-component .sk-input.sk-secondary.no-bg:before {
  content: none;
}

.sn-component .sk-notification.sk-secondary.featured,
.sn-component .sk-input.sk-secondary.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.sk-secondary.featured:before,
.sn-component .sk-input.sk-secondary.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.sk-secondary-contrast,
.sn-component .sk-input.sk-secondary-contrast {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-secondary-contrast-foreground-color);
  position: relative;
  background-color: var(--sn-stylekit-secondary-contrast-background-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-secondary-contrast-border-color);
  border: 1px solid var(--sn-stylekit-secondary-contrast-border-color);
}

.sn-component .sk-notification.sk-secondary-contrast *,
.sn-component .sk-input.sk-secondary-contrast * {
  position: relative;
}

.sn-component .sk-notification.sk-secondary-contrast:before,
.sn-component .sk-input.sk-secondary-contrast:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-secondary-contrast-background-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.sk-secondary-contrast:after,
.sn-component .sk-input.sk-secondary-contrast:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  color: var(--sn-stylekit-secondary-contrast-border-color);
  border-color: var(--sn-stylekit-secondary-contrast-border-color);
}

.sn-component .sk-notification.sk-secondary-contrast.no-bg,
.sn-component .sk-input.sk-secondary-contrast.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.sk-secondary-contrast.no-bg:before,
.sn-component .sk-input.sk-secondary-contrast.no-bg:before {
  content: none;
}

.sn-component .sk-notification.sk-secondary-contrast.featured,
.sn-component .sk-input.sk-secondary-contrast.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.sk-secondary-contrast.featured:before,
.sn-component .sk-input.sk-secondary-contrast.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.sk-base,
.sn-component .sk-input.sk-base {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-foreground-color);
  position: relative;
  background-color: var(--sn-stylekit-background-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-border-color);
  border: 1px solid var(--sn-stylekit-border-color);
}

.sn-component .sk-notification.sk-base *,
.sn-component .sk-input.sk-base * {
  position: relative;
}

.sn-component .sk-notification.sk-base:before,
.sn-component .sk-input.sk-base:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-background-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.sk-base:after,
.sn-component .sk-input.sk-base:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  color: var(--sn-stylekit-border-color);
  border-color: var(--sn-stylekit-border-color);
}

.sn-component .sk-notification.sk-base.no-bg,
.sn-component .sk-input.sk-base.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.sk-base.no-bg:before,
.sn-component .sk-input.sk-base.no-bg:before {
  content: none;
}

.sn-component .sk-notification.sk-base.featured,
.sn-component .sk-input.sk-base.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.sk-base.featured:before,
.sn-component .sk-input.sk-base.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.neutral,
.sn-component .sk-input.neutral {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-neutral-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-neutral-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-neutral-color);
}

.sn-component .sk-notification.neutral *,
.sn-component .sk-input.neutral * {
  position: relative;
}

.sn-component .sk-notification.neutral:before,
.sn-component .sk-input.neutral:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-neutral-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.neutral:after,
.sn-component .sk-input.neutral:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-neutral-color);
}

.sn-component .sk-notification.neutral.no-bg,
.sn-component .sk-input.neutral.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.neutral.no-bg:before,
.sn-component .sk-input.neutral.no-bg:before {
  content: none;
}

.sn-component .sk-notification.neutral.featured,
.sn-component .sk-input.neutral.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.neutral.featured:before,
.sn-component .sk-input.neutral.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.info,
.sn-component .sk-input.info {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-info-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-info-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-info-color);
}

.sn-component .sk-notification.info *,
.sn-component .sk-input.info * {
  position: relative;
}

.sn-component .sk-notification.info:before,
.sn-component .sk-input.info:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-info-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.info:after,
.sn-component .sk-input.info:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-info-color);
}

.sn-component .sk-notification.info.no-bg,
.sn-component .sk-input.info.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.info.no-bg:before,
.sn-component .sk-input.info.no-bg:before {
  content: none;
}

.sn-component .sk-notification.info.featured,
.sn-component .sk-input.info.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.info.featured:before,
.sn-component .sk-input.info.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.warning,
.sn-component .sk-input.warning {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-warning-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-warning-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-warning-color);
}

.sn-component .sk-notification.warning *,
.sn-component .sk-input.warning * {
  position: relative;
}

.sn-component .sk-notification.warning:before,
.sn-component .sk-input.warning:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-warning-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.warning:after,
.sn-component .sk-input.warning:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-warning-color);
}

.sn-component .sk-notification.warning.no-bg,
.sn-component .sk-input.warning.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.warning.no-bg:before,
.sn-component .sk-input.warning.no-bg:before {
  content: none;
}

.sn-component .sk-notification.warning.featured,
.sn-component .sk-input.warning.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.warning.featured:before,
.sn-component .sk-input.warning.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.danger,
.sn-component .sk-input.danger {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-danger-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-danger-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-danger-color);
}

.sn-component .sk-notification.danger *,
.sn-component .sk-input.danger * {
  position: relative;
}

.sn-component .sk-notification.danger:before,
.sn-component .sk-input.danger:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-danger-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.danger:after,
.sn-component .sk-input.danger:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-danger-color);
}

.sn-component .sk-notification.danger.no-bg,
.sn-component .sk-input.danger.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.danger.no-bg:before,
.sn-component .sk-input.danger.no-bg:before {
  content: none;
}

.sn-component .sk-notification.danger.featured,
.sn-component .sk-input.danger.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.danger.featured:before,
.sn-component .sk-input.danger.featured:before {
  opacity: 1;
}

.sn-component .sk-notification.success,
.sn-component .sk-input.success {
  /*
    If $border-color is supplied, we use traditional borders for rect.
    Only sk-notification and sk-input will supply their own border color because inputs don't seem to support inset shadow borders.
    If not, and we're inerferring border from other colors, we use box-shadow, so that we get rounded borders
  */
  color: var(--sn-stylekit-success-contrast-color);
  position: relative;
  background-color: var(--sn-stylekit-success-color);
  overflow: hidden;
  border-radius: var(--sn-stylekit-general-border-radius);
  /*
    We use box-shadow instead of border so that the borders are rounded properly around the rect.
    We keep border-color as well incase the individual elements want a border in some cases.
  */
  border-color: var(--sn-stylekit-success-color);
}

.sn-component .sk-notification.success *,
.sn-component .sk-input.success * {
  position: relative;
}

.sn-component .sk-notification.success:before,
.sn-component .sk-input.success:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-success-color);
  opacity: 1;
  border-radius: var(--sn-stylekit-general-border-radius);
}

.sn-component .sk-notification.success:after,
.sn-component .sk-input.success:after {
  content: '';
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: var(--sn-stylekit-general-border-radius);
  pointer-events: none;
  box-shadow: inset 0 0 0 1px;
  color: var(--sn-stylekit-success-color);
}

.sn-component .sk-notification.success.no-bg,
.sn-component .sk-input.success.no-bg {
  background-color: transparent;
}

.sn-component .sk-notification.success.no-bg:before,
.sn-component .sk-input.success.no-bg:before {
  content: none;
}

.sn-component .sk-notification.success.featured,
.sn-component .sk-input.success.featured {
  border: none;
  padding: 0.75rem 1.25rem;
  font-size: var(--sn-stylekit-font-size-h3);
}

.sn-component .sk-notification.success.featured:before,
.sn-component .sk-input.success.featured:before {
  opacity: 1;
}

.sn-component .sk-notification {
  padding: 1.1rem 1rem;
  margin: 1.4rem 0;
  text-align: left;
  cursor: default;
}

.sn-component .sk-notification.one-line {
  padding: 0rem 0.4rem;
}

.sn-component .sk-notification.stretch {
  width: 100%;
}

.sn-component .sk-notification.dashed {
  border-style: dashed;
  border-width: 2px;
}

.sn-component .sk-notification.dashed:after {
  box-shadow: none;
}

.sn-component .sk-notification .sk-notification-title {
  font-size: var(--sn-stylekit-font-size-h1);
  font-weight: bold;
  line-height: 1.9rem;
}

.sn-component .sk-notification .sk-notification-text {
  line-height: 1.5rem;
  font-size: var(--sn-stylekit-font-size-p);
  text-align: left;
  font-weight: normal;
}

.sn-component .sk-circle {
  border: 1px solid;
  cursor: pointer;
  border-color: var(--sn-stylekit-contrast-foreground-color);
  background-color: var(--sn-stylekit-contrast-background-color);
  padding: 0;
  border-radius: 50% !important;
  flex-shrink: 0;
}

.sn-component .sk-circle:before {
  border-radius: 50% !important;
}

.sn-component .sk-circle:after {
  border-radius: 50% !important;
}

.sn-component .sk-circle.small {
  width: 11px;
  height: 11px;
}

.sn-component .sk-spinner {
  border: 1px solid var(--sn-stylekit-neutral-color);
  border-radius: 50%;
  animation: rotate 0.8s infinite linear;
  border-right-color: transparent;
}

.sn-component .sk-spinner.small {
  width: 12px;
  height: 12px;
}

.sn-component .sk-spinner.info-contrast {
  border-color: var(--sn-stylekit-info-contrast-color);
  border-right-color: transparent;
}

.sn-component .sk-spinner.info {
  border-color: var(--sn-stylekit-info-color);
  border-right-color: transparent;
}

.sn-component .sk-spinner.warning {
  border-color: var(--sn-stylekit-warning-color);
  border-right-color: transparent;
}

.sn-component .sk-spinner.danger {
  border-color: var(--sn-stylekit-danger-color);
  border-right-color: transparent;
}

.sn-component .sk-spinner.success {
  border-color: var(--sn-stylekit-success-color);
  border-right-color: transparent;
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.sn-component .sk-app-bar {
  display: flex;
  width: 100%;
  height: 2rem;
  padding: 0rem 0.8rem;
  background-color: var(--sn-stylekit-contrast-background-color);
  color: var(--sn-stylekit-contrast-foreground-color);
  justify-content: space-between;
  align-items: center;
  border: 1px solid var(--sn-stylekit-contrast-border-color);
  user-select: none;
}

.sn-component .sk-app-bar.no-edges {
  border-left: 0;
  border-right: 0;
}

.sn-component .sk-app-bar.no-bottom-edge {
  border-bottom: 0;
}

.sn-component .sk-app-bar .left,
.sn-component .sk-app-bar .right {
  display: flex;
  height: 100%;
}

.sn-component .sk-app-bar .sk-app-bar-item {
  flex-grow: 1;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.sn-component .sk-app-bar .sk-app-bar-item:not(:first-child) {
  margin-left: 1rem;
}

.sn-component .sk-app-bar .sk-app-bar-item.border, .sn-component .sk-app-bar .sk-app-bar-item.sn-button.outlined, .sn-component .sk-app-bar .sk-app-bar-item.sn-dropdown-menu, .sn-component .sk-app-bar .sk-app-bar-item.sn-select {
  border-left: 1px solid var(--sn-stylekit-contrast-border-color);
}

.sn-component .sk-app-bar .sk-app-bar-item > .sk-app-bar-item-column {
  height: 100%;
  display: flex;
  align-items: center;
}

.sn-component .sk-app-bar .sk-app-bar-item > .sk-app-bar-item-column:not(:first-child) {
  margin-left: 0.5rem;
}

.sn-component .sk-app-bar .sk-app-bar-item > .sk-app-bar-item-column.underline {
  border-bottom: 2px solid var(--sn-stylekit-info-color);
}

.sn-component .sk-app-bar .sk-app-bar-item.no-pointer {
  cursor: default;
}

.sn-component .sk-app-bar .sk-app-bar-item:hover > .sk-label:not(.subtle), .sn-component .sk-app-bar .sk-panel-section .sk-app-bar-item:hover > .sk-panel-section-subtitle:not(.subtle), .sn-component .sk-panel-section .sk-app-bar .sk-app-bar-item:hover > .sk-panel-section-subtitle:not(.subtle),
.sn-component .sk-app-bar .sk-app-bar-item:hover > .sk-sublabel:not(.subtle),
.sn-component .sk-app-bar .sk-app-bar-item:hover > .sk-app-bar-item-column > .sk-label:not(.subtle),
.sn-component .sk-app-bar .sk-panel-section .sk-app-bar-item:hover > .sk-app-bar-item-column > .sk-panel-section-subtitle:not(.subtle),
.sn-component .sk-panel-section .sk-app-bar .sk-app-bar-item:hover > .sk-app-bar-item-column > .sk-panel-section-subtitle:not(.subtle),
.sn-component .sk-app-bar .sk-app-bar-item:hover > .sk-app-bar-item-column > .sk-sublabel:not(.subtle) {
  color: var(--sn-stylekit-info-color);
}

.sn-component .sk-app-bar .sk-app-bar-item > .sk-label, .sn-component .sk-app-bar .sk-panel-section .sk-app-bar-item > .sk-panel-section-subtitle, .sn-component .sk-panel-section .sk-app-bar .sk-app-bar-item > .sk-panel-section-subtitle,
.sn-component .sk-app-bar .sk-app-bar-item > .sk-app-bar-item-column > .sk-label,
.sn-component .sk-app-bar .sk-panel-section .sk-app-bar-item > .sk-app-bar-item-column > .sk-panel-section-subtitle,
.sn-component .sk-panel-section .sk-app-bar .sk-app-bar-item > .sk-app-bar-item-column > .sk-panel-section-subtitle {
  font-weight: bold;
  font-size: var(--sn-stylekit-font-size-h5);
  white-space: nowrap;
}

.sn-component .sk-app-bar .sk-app-bar-item > .sk-sublabel,
.sn-component .sk-app-bar .sk-app-bar-item > .sk-app-bar-item-column > .sk-sublabel {
  font-size: var(--sn-stylekit-font-size-h5);
  font-weight: normal;
  white-space: nowrap;
}

.sn-component .sk-app-bar .sk-app-bar-item .subtle {
  font-weight: normal;
  opacity: 0.6;
}

.sn-component .sk-panel-table {
  display: flex;
  flex-wrap: wrap;
  padding-left: 1px;
  padding-top: 1px;
}

.sn-component .sk-panel-table .sk-panel-table-item {
  flex: 45%;
  flex-flow: wrap;
  border: 1px solid var(--sn-stylekit-border-color);
  padding: 1rem;
  margin-left: -1px;
  margin-top: -1px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.sn-component .sk-panel-table .sk-panel-table-item img {
  max-width: 100%;
  margin-bottom: 1rem;
}

.sn-component .sk-panel-table .sk-panel-table-item .sk-panel-table-item-content {
  display: flex;
  flex-direction: row;
}

.sn-component .sk-panel-table .sk-panel-table-item .sk-panel-table-item-column {
  align-items: center;
}

.sn-component .sk-panel-table .sk-panel-table-item .sk-panel-table-item-column.stretch {
  width: 100%;
}

.sn-component .sk-panel-table .sk-panel-table-item .sk-panel-table-item-column:not(:first-child) {
  padding-left: 0.75rem;
}

.sn-component .sk-panel-table .sk-panel-table-item .sk-panel-table-item-column.quarter {
  flex-basis: 25%;
}

.sn-component .sk-panel-table .sk-panel-table-item .sk-panel-table-item-column.three-quarters {
  flex-basis: 75%;
}

.sn-component .sk-panel-table .sk-panel-table-item .sk-panel-table-item-footer {
  margin-top: 1.25rem;
}

.sn-component .sk-panel-table .sk-panel-table-item.no-border, .sn-component .sk-panel-table .sk-panel-table-item.sn-button, .sn-component .sk-panel-table .sk-panel-table-item.sn-dropdown-menu, .sn-component .sk-panel-table .sk-panel-table-item.sn-select, .sn-component .sk-panel-table .sk-panel-table-item.sn-select-button, .sn-component .sk-panel-table .sk-panel-table-item.sn-select-popover {
  border: none;
}

.sn-component .sk-modal {
  position: fixed;
  margin-left: auto;
  margin-right: auto;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 10000;
  width: 100vw;
  height: 100vh;
  background-color: transparent;
  color: var(--sn-stylekit-contrast-foreground-color);
  display: flex;
  align-items: center;
  justify-content: center;
}

.sn-component .sk-modal .sn-component {
  height: 100%;
}

.sn-component .sk-modal .sn-component .sk-panel {
  height: 100%;
}

.sn-component .sk-modal.auto-height > .sk-modal-content {
  height: auto !important;
}

.sn-component .sk-modal.large > .sk-modal-content {
  width: 900px;
  height: 600px;
}

.sn-component .sk-modal.medium > .sk-modal-content {
  width: 700px;
  height: 500px;
}

.sn-component .sk-modal.small > .sk-modal-content {
  width: 700px;
  height: 344px;
}

.sn-component .sk-modal .sk-modal-background {
  position: absolute;
  z-index: -1;
  width: 100%;
  height: 100%;
  background-color: var(--sn-stylekit-contrast-background-color);
  opacity: 0.7;
}

.sn-component .sk-modal > .sk-modal-content {
  overflow-y: auto;
  width: auto;
  padding: 0;
  padding-bottom: 0;
  min-width: 300px;
  -webkit-box-shadow: 0px 2px 35px 0px rgba(0, 0, 0, 0.19);
  -moz-box-shadow: 0px 2px 35px 0px rgba(0, 0, 0, 0.19);
  box-shadow: 0px 2px 35px 0px rgba(0, 0, 0, 0.19);
}

@keyframes slide-down {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.sn-component .slide-down-animation, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select-popover {
  animation: slide-down 0.2s ease;
}

.sn-component .no-border, .sn-component .sn-button, .sn-component .sn-dropdown-menu, .sn-component .sn-select, .sn-component .sn-select-button, .sn-component .sn-select-popover {
  border-width: 0px;
}

.sn-component .border-rounded, .sn-component .sn-button {
  border-radius: 0.25rem;
}

.sn-component .border-rounded-md {
  border-radius: 0.375rem;
}

.sn-component .border, .sn-component .sn-button.outlined, .sn-component .sn-dropdown-menu, .sn-component .sn-select {
  border-width: 1px;
}

.sn-component .border-gray-300, .sn-component .sn-button.outlined, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select, .sn-component .sn-select-list, .sn-component .sn-select-popover {
  border-color: var(--sn-stylekit-border-color);
}

.sn-component .border-rounded-sm, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select, .sn-component .sn-select-list, .sn-component .sn-select-popover {
  border-radius: 0.25rem;
}

.sn-component .border-solid, .sn-component .sn-button, .sn-component .sn-dropdown-menu, .sn-component .sn-select {
  border-style: solid;
}

.sn-component .border-box, .sn-component .sn-select {
  box-sizing: border-box;
}

.sn-component .bg-default, .sn-component .sn-button.outlined, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select, .sn-component .sn-select-list {
  background-color: var(--sn-stylekit-background-color);
}

.sn-component .bg-info, .sn-component .sn-button.info {
  background-color: var(--sn-stylekit-info-color);
}

.sn-component .bg-info-dark, .sn-component .hover\:bg-info-dark:hover, .sn-component .sn-button.info:hover, .sn-component .focus\:bg-info-dark:focus, .sn-component .sn-button.info:focus {
  background-color: var(--sn-stylekit-info-color-darkened);
}

.sn-component .color-text, .sn-component .sn-button.outlined, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select, .sn-component .sn-select-list {
  color: var(--sn-stylekit-contrast-foreground-color);
}

.sn-component .color-info-contrast, .sn-component .sn-button.info {
  color: var(--sn-stylekit-info-contrast-color);
}

.sn-component .selected\:bg-color[data-selected], .sn-component .sn-dropdown-menu-list-item[data-selected], .sn-component .sn-select-list-option[data-selected],
.sn-component .selected\:bg-color[aria-selected="true"],
.sn-component .sn-dropdown-menu-list-item[aria-selected="true"],
.sn-component .sn-select-list-option[aria-selected="true"] {
  background-color: var(--sn-stylekit-list-item-highlight-color);
}

.sn-component .selected\:fg-color[data-selected], .sn-component .sn-dropdown-menu-list-item[data-selected], .sn-component .sn-select-list-option[data-selected],
.sn-component .selected\:fg-color[aria-selected="true"],
.sn-component .sn-dropdown-menu-list-item[aria-selected="true"],
.sn-component .sn-select-list-option[aria-selected="true"] {
  color: var(--sn-stylekit-contrast-foreground-color);
}

.sn-component .inline-flex, .sn-component .sn-dropdown-menu, .sn-component .sn-select, .sn-component .sn-select-button {
  display: inline-flex;
}

.sn-component .block {
  display: block;
}

.sn-component .flex, .sn-component .sn-dropdown-menu-list-item {
  display: flex;
}

.sn-component .flex-col {
  flex-direction: column;
}

.sn-component .flex-grow {
  flex-grow: 1;
}

.sn-component .items-center, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list-item, .sn-component .sn-select, .sn-component .sn-select-button {
  align-items: center;
}

.sn-component .justify-center, .sn-component .sn-dropdown-menu, .sn-component .sn-select, .sn-component .sn-select-button {
  justify-content: center;
}

.sn-component .gap-2 {
  grid-gap: 0.5rem;
  gap: 0.5rem;
}

.sn-component .gap-3 {
  grid-gap: 0.75rem;
  gap: 0.75rem;
}

.sn-component .absolute, .sn-component .sn-dropdown-menu-list {
  position: absolute;
}

.sn-component .cursor-pointer, .sn-component .sn-button, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list-item, .sn-component .sn-select, .sn-component .sn-select-button, .sn-component .sn-select-list-option {
  cursor: pointer;
}

.sn-component .origin-top-right, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select-list {
  transform-origin: top right;
}

.sn-component .hover\:brightness-130:hover, .sn-component .sn-button.contrast:hover, .sn-component .sn-button.neutral:hover, .sn-component .sn-button.warning:hover, .sn-component .sn-button.danger:hover, .sn-component .sn-button.success:hover {
  filter: brightness(130%);
}

.sn-component .hover\:bg-highlight:hover, .sn-component .sn-button.outlined:hover, .sn-component .sn-dropdown-menu:hover, .sn-component .sn-dropdown-menu-list-item:hover, .sn-component .sn-select:hover {
  background-color: var(--sn-stylekit-list-item-highlight-color);
}

.sn-component .focus\:bg-highlight:focus, .sn-component .sn-button.outlined:focus {
  background-color: var(--sn-stylekit-list-item-highlight-color);
}

.sn-component .focus\:shadow-none:focus, .sn-component .sn-button.outlined:focus, .sn-component .sn-button.info:focus, .sn-component .sn-dropdown-menu:focus, .sn-component .sn-dropdown-menu-list-item:focus, .sn-component .sn-select:focus, .sn-component .sn-select-button:focus, .sn-component .sn-select-list:focus, .sn-component .sn-select-popover:focus {
  box-shadow: none;
}

.sn-component .focus\:outline-none:focus, .sn-component .sn-button.outlined:focus, .sn-component .sn-button.info:focus, .sn-component .sn-dropdown-menu:focus, .sn-component .sn-dropdown-menu-list:focus, .sn-component .sn-dropdown-menu-list-item:focus, .sn-component .sn-select:focus, .sn-component .sn-select-button:focus, .sn-component .sn-select-list:focus, .sn-component .sn-select-popover:focus {
  outline: none;
}

.sn-component .box-shadow, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select-popover, .sn-component .box-shadow:focus, .sn-component .sn-dropdown-menu-list:focus, .sn-component .sn-select-popover:focus, .sn-component .box-shadow:focus-within, .sn-component .sn-dropdown-menu-list:focus-within, .sn-component .sn-select-popover:focus-within {
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.12), 0px 2px 8px rgba(0, 0, 0, 0.04);
}

.sn-component .capitalize, .sn-component .sn-button {
  text-transform: capitalize;
}

.sn-component .font-normal, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select, .sn-component .sn-select-list-option {
  font-weight: 300;
}

.sn-component .font-bold, .sn-component .sn-button {
  font-weight: 700;
}

.sn-component .text-center {
  text-align: center;
}

.sn-component .text-xs, .sn-component .sn-button.small {
  font-size: 0.75rem;
  line-height: 1rem;
}

.sn-component .text-sm, .sn-component .sn-button, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list-item, .sn-component .sn-select, .sn-component .sn-select-list, .sn-component .sn-select-list-option {
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.sn-component .text-base {
  font-size: 1rem;
}

.sn-component .text-lg {
  font-size: 1.125rem;
  line-height: 1.75rem;
}

.sn-component .text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}

.sn-component .font-medium {
  font-weight: 500;
}

.sn-component .h-full {
  height: 100%;
}

.sn-component .m-h-32, .sn-component .sn-button, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list-item, .sn-component .sn-select {
  min-height: 2rem;
}

.sn-component .leading-4, .sn-component .sn-dropdown-menu, .sn-component .sn-select {
  line-height: 1rem;
}

.sn-component .my-1 {
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
}

.sn-component .mr-2, .sn-component .sn-dropdown-menu > .sn-icon:first-child, .sn-component .sn-dropdown-menu-list-item > .sn-icon {
  margin-right: 0.5rem;
}

.sn-component .ml-1\.5 {
  margin-left: 0.375rem;
}

.sn-component .ml-2, .sn-component .sn-dropdown-menu > .sn-icon:last-child, .sn-component .sn-select-button > .sn-icon:last-child {
  margin-left: 0.5rem;
}

.sn-component .ml-6 {
  margin-left: 1.5rem;
}

.sn-component .mr-1\.5 {
  margin-right: 0.375rem;
}

.sn-component .mt-1 {
  margin-top: 0.25rem;
}

.sn-component .mt-2, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select-popover {
  margin-top: 0.5rem;
}

.sn-component .mt-4 {
  margin-top: 1rem;
}

.sn-component .py-1, .sn-component .sn-dropdown-menu, .sn-component .sn-select-button {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}

.sn-component .py-2, .sn-component .sn-button, .sn-component .sn-dropdown-menu-list, .sn-component .sn-select-list-option {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.sn-component .py-3 {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
}

.sn-component .px-3, .sn-component .sn-button {
  padding-left: 0.75rem;
  padding-right: 0.75rem;
}

.sn-component .px-2, .sn-component .sn-dropdown-menu, .sn-component .sn-dropdown-menu-list-item {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

.sn-component .px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

.sn-component .px-1 {
  padding-left: 0.25rem;
  padding-right: 0.25rem;
}

.sn-component .py-1, .sn-component .sn-dropdown-menu, .sn-component .sn-select-button {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}

.sn-component .no-padding {
  padding-top: 0;
  padding-bottom: 0;
}

.sn-component .w-auto, .sn-component .sn-dropdown-menu, .sn-component .sn-select {
  width: auto;
}

.sn-component .w-full {
  width: 100%;
}

.sn-component .w-56, .sn-component .sn-dropdown-menu-list {
  width: 14rem;
}

.sn-component .min-w-265, .sn-component .sn-dropdown-menu-list {
  min-width: 265px;
}

.sn-component .max-w-md {
  max-width: 28rem;
}

.sn-component .sn-button.contrast {
  background-color: var(--sn-stylekit-contrast-foreground-color);
  color: var(--sn-stylekit-contrast-background-color);
}

.sn-component .sn-button.neutral {
  background-color: var(--sn-stylekit-neutral-color);
  color: var(--sn-stylekit-neutral-contrast-color);
}

.sn-component .sn-button.warning {
  background-color: var(--sn-stylekit-warning-color);
  color: var(--sn-stylekit-warning-contrast-color);
}

.sn-component .sn-button.danger {
  background-color: var(--sn-stylekit-danger-color);
  color: var(--sn-stylekit-danger-contrast-color);
}

.sn-component .sn-button.success {
  background-color: var(--sn-stylekit-success-color);
  color: var(--sn-stylekit-success-contrast-color);
}

.sn-component.no-select {
  user-select: none;
}

/* Goes outside of .sn-component declaration, as following properties are global */
input,
textarea,
[contenteditable] {
  caret-color: var(--sn-stylekit-editor-foreground-color);
}

.windows-web,
.windows-desktop,
.linux-web,
.linux-desktop {
  scrollbar-width: thin;
}

.windows-web ::-webkit-scrollbar,
.windows-desktop ::-webkit-scrollbar,
.linux-web ::-webkit-scrollbar,
.linux-desktop ::-webkit-scrollbar {
  width: 17px;
  height: 18px;
  border-left: none;
}

.windows-web ::-webkit-scrollbar-thumb,
.windows-desktop ::-webkit-scrollbar-thumb,
.linux-web ::-webkit-scrollbar-thumb,
.linux-desktop ::-webkit-scrollbar-thumb {
  border: 4px solid rgba(0, 0, 0, 0);
  background-clip: padding-box;
  -webkit-border-radius: 10px;
  background-color: var(--sn-stylekit-scrollbar-thumb-color);
  -webkit-box-shadow: inset -1px -1px 0px rgba(0, 0, 0, 0.05), inset 1px 1px 0px rgba(0, 0, 0, 0.05);
}

.windows-web ::-webkit-scrollbar-button,
.windows-desktop ::-webkit-scrollbar-button,
.linux-web ::-webkit-scrollbar-button,
.linux-desktop ::-webkit-scrollbar-button {
  width: 0;
  height: 0;
  display: none;
}

.windows-web ::-webkit-scrollbar-corner,
.windows-desktop ::-webkit-scrollbar-corner,
.linux-web ::-webkit-scrollbar-corner,
.linux-desktop ::-webkit-scrollbar-corner {
  background-color: transparent;
}

:root {
  --reach-listbox: 1;
}

[data-reach-listbox-popover] {
  display: block;
  position: absolute;
  min-width: -moz-fit-content;
  min-width: -webkit-min-content;
  min-width: min-content;
  padding: 0.25rem 0;
  background: white;
  outline: none;
  border: solid 1px rgba(0, 0, 0, 0.25);
}

[data-reach-listbox-popover]:focus-within {
  box-shadow: 0 0 4px Highlight;
  outline: -webkit-focus-ring-color auto 4px;
}

[data-reach-listbox-popover][hidden] {
  display: none;
}

[data-reach-listbox-list] {
  margin: 0;
  padding: 0;
  list-style: none;
}

[data-reach-listbox-list]:focus {
  box-shadow: none;
  outline: none;
}

[data-reach-listbox-option] {
  display: block;
  margin: 0;
  padding: 0.25rem 0.5rem;
  white-space: nowrap;
  user-select: none;
}

[data-reach-listbox-option][aria-selected="true"] {
  background: #1672d4;
  color: white;
}

[data-reach-listbox-option][data-current] {
  font-weight: bolder;
}

[data-reach-listbox-option][data-current][data-confirming] {
  animation: flash 100ms;
  animation-iteration-count: 1;
}

[data-reach-listbox-option][aria-disabled="true"] {
  opacity: 0.5;
}

[data-reach-listbox-button] {
  display: inline-flex;
  align-items: center;
  justify-content: space-between;
  padding: 1px 10px 2px;
  border: 1px solid;
  border-color: #d8d8d8 #d1d1d1 #bababa;
  cursor: default;
  user-select: none;
}

[data-reach-listbox-button][aria-disabled="true"] {
  opacity: 0.5;
}

[data-reach-listbox-arrow] {
  margin-left: 0.5rem;
  display: block;
  font-size: 0.5em;
}

[data-reach-listbox-group-label] {
  display: block;
  margin: 0;
  padding: 0.25rem 0.5rem;
  white-space: nowrap;
  user-select: none;
  font-weight: bolder;
}

@keyframes flash {
  0% {
    background: #1159a6;
    color: white;
    opacity: 1;
  }
  50% {
    opacity: 0.5;
    background: inherit;
    color: inherit;
  }
  100% {
    background: #1159a6;
    color: white;
    opacity: 1;
  }
}

