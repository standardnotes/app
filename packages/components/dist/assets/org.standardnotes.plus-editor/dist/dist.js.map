{"version":3,"file":"dist.js","mappings":"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","sources":["webpack://@standardnotes/rich-text/./src/main.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n  let componentRelay\n  let workingNote, clientData\n  let lastValue, lastUUID\n  let ignoreTextChange = false\n  let newNoteLoad = true,\n    didToggleFullScreen = false\n\n  const blockString = [\n    'address',\n    'article',\n    'aside',\n    'blockquote',\n    'details',\n    'dialog',\n    'dd',\n    'div',\n    'dl',\n    'dt',\n    'fieldset',\n    'figcaption',\n    'figure',\n    'footer',\n    'form',\n    'form',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'header',\n    'hgroup',\n    'hr',\n    'li',\n    'main',\n    'nav',\n    'ol',\n    'p',\n    'pre',\n    'section',\n    'table',\n    'ul',\n  ].join(', ')\n\n  const getElementHeight = (el) => {\n    let elHeight = el.offsetHeight\n    elHeight += parseInt(window.getComputedStyle(el).getPropertyValue('margin-top'))\n    elHeight += parseInt(window.getComputedStyle(el).getPropertyValue('margin-bottom'))\n    return elHeight\n  }\n\n  function loadComponentRelay() {\n    componentRelay = new ComponentRelay({\n      targetWindow: window,\n      onReady: () => {\n        const platform = componentRelay.platform\n        if (platform) {\n          document.body.classList.add(platform)\n        }\n      },\n      handleRequestForContentHeight: () => {\n        const editor = document.querySelector('.note-editable')\n        const toolbar = document.querySelector('.note-toolbar')\n        if (!editor || !toolbar) {\n          return undefined\n        }\n\n        let height = getElementHeight(toolbar) + 40\n        for (const child of editor.children) {\n          height += getElementHeight(child)\n        }\n\n        return height\n      },\n    })\n\n    componentRelay.streamContextItem((note) => {\n      onReceivedNote(note)\n    })\n  }\n\n  function strip(html) {\n    const tmp = document.implementation.createHTMLDocument('New').body\n    tmp.innerHTML = html\n    return tmp.textContent || tmp.innerText || ''\n  }\n\n  function truncateString(string, limit = 90) {\n    if (string.length <= limit) {\n      return string\n    } else {\n      return string.substring(0, limit) + '...'\n    }\n  }\n\n  function save() {\n    if (workingNote) {\n      // Be sure to capture this object as a variable, as workingNote may be\n      // reassigned in `streamContextItem`, so by the time you modify it in\n      // the presave block, it may not be the same object anymore, so the\n      // presave values will not be applied to the right object, and it will\n      // save incorrectly.\n      const note = workingNote\n\n      componentRelay.saveItemWithPresave(note, () => {\n        lastValue = $('#summernote').summernote('code')\n        note.clientData = clientData\n\n        note.content.text = lastValue\n        note.content.preview_plain = truncateString(strip(lastValue))\n        note.content.preview_html = null\n      })\n    }\n  }\n\n  function onReceivedNote(note) {\n    if (note.uuid !== lastUUID) {\n      // Note changed, reset last values\n      lastValue = null\n      newNoteLoad = true\n      lastUUID = note.uuid\n    }\n\n    workingNote = note\n\n    // Only update UI on non-metadata updates.\n    if (note.isMetadataUpdate) {\n      return\n    }\n\n    clientData = note.clientData\n    let newText = note.content.text\n\n    $('.note-editable').attr('spellcheck', JSON.stringify(note.content.spellcheck))\n\n    if (newText == lastValue) {\n      return\n    }\n\n    const summernote = $('#summernote')\n    if (summernote) {\n      ignoreTextChange = true\n      const isHtml = /<[a-z][\\s\\S]*>/i.test(newText)\n\n      if (!didToggleFullScreen) {\n        summernote.summernote('fullscreen.toggle')\n        didToggleFullScreen = true\n      }\n\n      if (newNoteLoad && !isHtml) {\n        newText = textToHTML(newText)\n      }\n\n      let renderNote = false\n      const isUnsafeContent = checkIfUnsafeContent(newText)\n\n      if (isUnsafeContent) {\n        const currentNotePreferences = getCurrentNotePreferences()\n        if (!currentNotePreferences) {\n          showUnsafeContentAlert().then((result) => {\n            if (result) {\n              setNotePreferences('trustUnsafeContent', result)\n              renderNote = result\n            }\n          })\n        } else {\n          renderNote = currentNotePreferences.trustUnsafeContent || false\n        }\n      } else {\n        renderNote = true\n      }\n\n      /**\n       * If the user decides not to continue rendering the note,\n       * clear the editor and disable it.\n       */\n      if (!renderNote) {\n        summernote.summernote('code', '')\n        summernote.summernote('disable')\n        return\n      }\n\n      summernote.summernote('enable')\n      summernote.summernote('code', newText)\n\n      if (newNoteLoad) {\n        // Clears history but keeps note contents. Note that this line will\n        // trigger a summernote.change event, so be sure to do this inside a\n        // `ignoreTextChange` block.\n        summernote.summernote('commit')\n        newNoteLoad = false\n      }\n\n      ignoreTextChange = false\n    }\n  }\n\n  function getNotePreferences() {\n    return componentRelay.getComponentDataValueForKey('notes') || {}\n  }\n\n  function getCurrentNotePreferences() {\n    const notesPreferences = getNotePreferences()\n    return notesPreferences[lastUUID]\n  }\n\n  function setNotePreferences(key, value) {\n    const notesPreferences = getNotePreferences()\n    notesPreferences[lastUUID] = {\n      [key]: value,\n    }\n    componentRelay.setComponentDataValueForKey('notes', notesPreferences)\n  }\n\n  /**\n   * Checks if the content contains at least one script tag.\n   */\n  function checkIfUnsafeContent(content) {\n    const doc = new DOMParser().parseFromString(`<body>${content}</body>`, 'text/html')\n    return Array.from(doc.body.childNodes).some((node) => node.nodeName == 'SCRIPT')\n  }\n\n  function showUnsafeContentAlert() {\n    const text =\n      'Weâ€™ve detected that this note contains a script or code snippet which may be unsafe to execute. ' +\n      'Scripts executed in the editor have the ability to impersonate as the editor to Standard Notes. ' +\n      'Press Continue to mark this script as safe and proceed, or Cancel to avoid rendering this note.'\n\n    return new Promise((resolve) => {\n      const alert = new Stylekit.SKAlert({\n        title: null,\n        text,\n        buttons: [\n          {\n            text: 'Cancel',\n            style: 'neutral',\n            action: function () {\n              resolve(false)\n            },\n          },\n          {\n            text: 'Continue',\n            style: 'danger',\n            action: function () {\n              resolve(true)\n            },\n          },\n        ],\n      })\n      alert.present()\n    })\n  }\n\n  function loadEditor() {\n    $('#summernote').summernote({\n      height: 500, // set editor height\n      minHeight: null, // set minimum height of editor\n      maxHeight: null, // set maximum height of editor\n      focus: true, // set focus to editable area after initializing summernote\n      tabDisable: true, // set tab interaction to note only\n      showDomainOnlyForAutolink: false, // set autolink to preserve whole link\n      toolbar: [\n        // [groupName, [list of button]]\n        ['para', ['style']],\n        ['style', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n        ['fontsize', ['fontsize', 'fontname']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['height', ['height']],\n        ['insert', ['table', 'link', 'hr', 'picture', 'video']],\n        ['misc', ['codeview', 'help']],\n      ],\n      fontNames: [\n        'Arial',\n        'Arial Black',\n        'Comic Sans MS',\n        'Courier New',\n        'Helvetica Neue',\n        'Helvetica',\n        'Impact',\n        'Lucida Grande',\n        'Monospace',\n        'Roboto',\n        'system-ui',\n        'Tahoma',\n        'Times New Roman',\n        'Verdana',\n      ],\n      callbacks: {\n        onInit: function () {},\n        onImageUpload: function () {\n          alert(\n            'Embedding encrypted images directly inside the editor is not presently supported. You can attach files to be outside the editor instead. For embedding images directly inside this note, use the Image button in the toolbar and insert the URL of an image hosted externally (outside of Standard Notes). For more information, visit https://standardnotes.com/help/36/how-do-i-attach-encrypted-files-to-my-notes.',\n          )\n        },\n      },\n    })\n\n    // summernote.change\n    $('#summernote').on('summernote.change', function () {\n      // Add RTL support when block-level elements are detect onchange.\n      document.querySelectorAll(blockString).forEach((element) => element.setAttribute('dir', 'auto'))\n\n      if (!ignoreTextChange) {\n        save()\n      }\n    })\n\n    $('textarea.note-codable').on('input', () => {\n      save()\n    })\n  }\n\n  loadEditor()\n  loadComponentRelay()\n\n  function textToHTML(text) {\n    return ((text || '') + '').replace(/\\t/g, '    ').replace(/\\r\\n|\\r|\\n/g, '<br />')\n  }\n})\n"],"names":["document","addEventListener","componentRelay","workingNote","clientData","lastValue","lastUUID","ignoreTextChange","newNoteLoad","didToggleFullScreen","blockString","join","getElementHeight","el","elHeight","offsetHeight","parseInt","window","getComputedStyle","getPropertyValue","save","note","saveItemWithPresave","$","summernote","content","text","preview_plain","string","limit","length","substring","truncateString","html","tmp","implementation","createHTMLDocument","body","innerHTML","textContent","innerText","strip","preview_html","getNotePreferences","getComponentDataValueForKey","height","minHeight","maxHeight","focus","tabDisable","showDomainOnlyForAutolink","toolbar","fontNames","callbacks","onInit","onImageUpload","alert","on","querySelectorAll","forEach","element","setAttribute","ComponentRelay","targetWindow","onReady","platform","classList","add","handleRequestForContentHeight","editor","querySelector","child","children","streamContextItem","uuid","isMetadataUpdate","newText","attr","JSON","stringify","spellcheck","isHtml","test","replace","renderNote","doc","DOMParser","parseFromString","Array","from","childNodes","some","node","nodeName","checkIfUnsafeContent","currentNotePreferences","trustUnsafeContent","Promise","resolve","Stylekit","SKAlert","title","buttons","style","action","present","then","result","key","value","notesPreferences","setComponentDataValueForKey","setNotePreferences","onReceivedNote"],"sourceRoot":""}